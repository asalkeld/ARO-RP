//go:generate go run . -o ../../pkg/util/azureclient/apiversions.go
//go:generate gofmt -s -l -w ../../pkg/util/azureclient/apiversions.go

package main

// Copyright (c) Microsoft Corporation.
// Licensed under the Apache License 2.0.

import (
	"flag"
	"fmt"
	"io/ioutil"
	"sort"
	"strings"

	"github.com/BurntSushi/toml"
)

var (
	outputFile = flag.String("o", "", "output file")
	nameMap    = map[string]string{
		"cosmos-db": "documentdb",
	}
	versionOverride = map[string]string{
		"authorization-roledefinition": "2018-01-01-preview",
		"authorization-denyassignment": "2018-07-01-preview",
		"containerregistry":            "2019-05-01",
	}
)

type lock struct {
	Projects []*struct {
		Name     string
		Packages []string
		Revision string
	}
}

func run() error {
	var lock lock

	_, err := toml.DecodeFile("../../Gopkg.lock", &lock)
	if err != nil {
		return err
	}

	for _, project := range lock.Projects {
		if !strings.EqualFold(project.Name, "github.com/Azure/azure-sdk-for-go") {
			continue
		}

		apis := map[string]string{}

		for _, pkg := range project.Packages {
			names := strings.Split(pkg, "/")
			var name string
			var version string
			if names[0] == "services" {
				if names[1] == "preview" {
					name = names[2]
					version = names[4]
				} else {
					name = names[1]
					version = names[3]
				}
				// map names
				newName, ok := nameMap[name]
				if ok {
					name = newName
				}

				if !strings.HasPrefix(version, "20") {
					continue
				}
				// use the latest version if multiple
				if ver, ok := apis[name]; ok {
					if ver > version {
						version = ver
					}
				}

				apis[name] = version
			}
		}
		for name, version := range versionOverride {
			apis[name] = version
		}

		contents := `package azureclient

		// Copyright (c) Microsoft Corporation.
		// Licensed under the Apache License 2.0.

		// APIVersions is automatically generated by hack/genapiversions
		var APIVersions = map[string]string{
		`
		keys := []string{}
		for key := range apis {
			keys = append(keys, key)
		}
		sort.Strings(keys)
		for _, n := range keys {
			contents += fmt.Sprintf("\"%s\":     \"%s\",\n", n, apis[n])
		}

		contents += "}"
		if *outputFile != "" {
			err = ioutil.WriteFile(*outputFile, []byte(contents), 0666)
		} else {
			_, err = fmt.Print(contents)
		}
		return err
	}

	return nil
}

func main() {
	flag.Parse()

	if err := run(); err != nil {
		panic(err)
	}
}
