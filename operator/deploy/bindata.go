// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x1a\x5d\x73\xdb\xb8\xf1\xdd\xbf\x62\xc7\xf7\xe0\xde\xd4\xa4\x2e\xe9\x74\xa6\xd5\x5b\x9a\xdc\x5d\xdd\x5e\x93\x8c\xed\xde\x4b\x92\x87\x15\xb8\x22\xb7\x06\x01\x16\x00\xa5\x28\x37\xf7\xdf\x3b\x0b\x90\x14\x25\x91\xb6\x92\xfb\x28\x5f\x6c\x82\xd8\xef\x4f\x2c\x84\x0d\xff\x48\xce\xb3\x35\x4b\xd8\x3c\xbb\x78\x60\x53\x2c\xe1\x35\xd6\xe4\x1b\x54\x74\x51\x53\xc0\x02\x03\x2e\x2f\x00\x0c\xd6\xb4\x04\xdb\x90\xf1\x15\xaf\x43\x86\x9f\x5a\x47\x99\x6d\xc8\x61\xb0\xee\x22\xcb\xb2\x8b\x31\x36\x6c\x98\x3e\x06\x32\xf2\xe6\xf3\x87\xbf\xf8\x9c\xed\x62\xf3\x6c\x45\x01\x7b\x3a\x2f\x5b\x1f\x6c\x7d\x4b\xde\xb6\x4e\xd1\x2b\x5a\xb3\xe1\xc0\xd6\x1c\x90\x45\x63\x6c\x40\x59\xf6\xf2\x0a\xa0\xac\x09\xce\x6a\x4d\x2e\x2b\xc9\xe4\x0f\xed\x8a\x56\x2d\xeb\x82\x5c\xa4\x30\x48\xf3\x4d\xfe\x3c\xff\xf3\x05\x80\x72\x14\xc1\xef\xb9\x26\x1f\xb0\x6e\x96\x60\x5a\xad\x07\x89\x94\x6e\x7d\x20\xe7\x73\x74\x36\x1f\xc4\xcb\xd9\x5e\xf8\x86\x94\xd0\x2c\x9d\x6d\x9b\x25\x9c\x7c\x4f\x18\x3a\xb6\x3a\x91\x12\xb2\xb8\xa2\xd9\x87\x7f\x8e\x57\x7f\x60\x1f\xe2\x97\x46\xb7\x0e\xf5\x9e\x74\x5c\xf4\x6c\xca\x56\xa3\x1b\x96\x2f\x00\xbc\xb2\x0d\x8d\xb1\xfa\x76\xe5\x3a\x7d\x75\x74\x7d\xc0\xd0\xfa\x25\xfc\xf4\xf3\x05\xc0\x06\x35\x17\x51\xda\xf4\x51\xd8\x7d\xf1\xf6\xe6\xc7\x3f\xdd\xa9\x8a\x6a\x4c\x8b\x00\x05\x79\xe5\xb8\x89\xfb\x7a\xe4\xc0\x1e\x42\x45\x90\x76\xc2\xda\xba\xf8\xda\xb3\x08\x2f\xde\xde\x74\xd0\x8d\x13\xa3\x07\xee\x39\x90\x67\x64\xf9\x61\xed\x88\xce\x95\x30\x92\xf6\x40\x21\xb6\xa6\x44\xb0\xb3\x18\x15\xe0\x13\x69\xbb\x86\x50\xb1\x07\x47\x8d\x23\x4f\x26\x59\x7f\x84\x16\x64\x0b\x1a\xb0\xab\xff\x90\x0a\x39\xdc\x91\x13\x24\xe0\x2b\xdb\xea\x42\x1c\x64\x43\x2e\x80\x23\x65\x4b\xc3\x9f\x06\xcc\x1e\x82\x8d\x24\x35\x06\xea\x4c\xd1\x3f\x6c\x02\x39\x83\x5a\x54\xd8\xd2\x35\xa0\x29\xa0\xc6\x1d\x38\x12\x1a\xd0\x9a\x11\xb6\xb8\xc5\xe7\xf0\x2f\xeb\x08\xd8\xac\xed\x12\xaa\x10\x1a\xbf\x5c\x2c\x4a\x0e\xbd\xaf\x2b\x5b\xd7\xad\xe1\xb0\x5b\x44\x8f\xe5\x55\x1b\xac\xf3\x8b\x82\x36\xa4\x17\x9e\xcb\x0c\x9d\xaa\x38\x90\x0a\xad\xa3\x05\x36\x9c\x45\xc6\x4d\x74\xf5\xbc\x2e\xbe\x1a\x0c\x7d\x35\xe2\x34\xec\xc4\x21\x7c\x70\x6c\xca\x61\x39\xfa\xde\xac\xde\xc5\x07\xc5\xba\xd8\x81\x25\xfe\xf7\xea\x95\x25\xd1\xca\xed\xb7\x77\xf7\xd0\x13\x8d\x26\x38\xd4\x79\xd4\xf6\x1e\xcc\xef\x15\x2f\x8a\x62\xb3\x26\x97\x0c\xb7\x76\xb6\x8e\x18\xc9\x14\x8d\x65\x13\x3a\x4f\x62\x32\x87\x4a\xf7\xed\xaa\xe6\x20\x96\xfe\x6f\x4b\x3e\x88\x7d\x72\x78\x19\x23\x1e\x56\x04\x6d\x53\x60\xa0\x22\x87\x1b\x03\x2f\xb1\x26\xfd\x12\x3d\xfd\xe6\x6a\x17\x0d\xfb\x4c\x54\xfa\xb4\xe2\xc7\x89\xea\x70\x63\xd2\xd6\xb0\xdc\xa7\x92\x49\x0b\x75\x11\x78\xd7\x90\x3a\x88\x8c\x82\x3c\x3b\xf1\xde\x80\x81\xc4\xe7\xc7\xd9\x65\x3e\x16\x63\x3c\x2a\x27\x59\xfc\x70\x71\x46\x08\x79\x4a\x32\xb4\xc1\x1f\x6c\x59\xb2\x29\x8f\xa1\xe6\x88\x40\xca\xc6\x6b\x2e\x27\x62\x7f\x00\xc6\x20\x91\xb5\x84\xab\x77\xdf\x64\x7f\xfd\xf0\xc7\x3c\xfd\xb9\x9a\xd8\x3a\xcb\x5d\x54\xb5\x35\x1c\xac\x7c\xfa\xfe\xe5\xdd\xb7\x66\xc3\xce\x9a\x9a\x4c\x98\xa2\x49\xa6\xad\xa7\xd6\x33\x78\xc5\x58\x1a\xeb\x03\x2b\xff\xd6\xd9\x62\x72\xcf\xfd\x71\x6e\xf8\x5c\xee\x6e\xa9\x9c\x51\xc6\x99\x38\xee\xc9\xe0\xb4\x64\x8f\x22\x30\x7d\xdd\xfe\x4c\xc8\x49\x8f\x95\xa7\x4f\x06\x37\xc5\x31\xc6\x03\xff\xed\x2b\xf8\xcd\xab\xbe\x88\xbc\x90\xde\x60\x04\x9e\x72\x3a\x8d\x2a\xdb\x19\xac\x4d\x07\x52\x2a\x77\x4f\x85\x52\xdc\x75\x10\x4c\x76\xe5\x25\x5b\x7d\x51\x34\x29\x6b\x0a\x1e\xb5\x20\x73\xc4\x87\x6d\x5d\xba\xa5\x10\xe9\xf4\xcb\xc0\xc6\x07\x34\x8a\x7c\x7e\x84\x86\x03\xd5\x13\xc1\x75\x80\xfd\x72\x8f\x67\x9f\x83\x53\x19\x14\xc9\x62\x91\x3c\x28\x8c\x57\x3e\xc9\x7a\x4c\x4c\x9e\x11\xab\xe8\x48\x60\x86\x66\x0d\x6a\x52\x15\x1a\xf6\x75\x2c\x8a\xa6\xa0\x42\xea\xa6\xe4\x63\x4f\x05\x6c\x2b\x32\xa2\xd0\x09\xa4\x05\x05\x64\xed\x07\x26\xf6\x6c\x09\x0d\x49\xea\x08\x8d\x63\xeb\x18\x1e\x8c\xdd\x1a\xb0\x0e\xb6\xb1\x64\xc7\x6f\x4d\xa3\x77\x53\x8e\x6b\x01\xb5\xde\xeb\x2e\xa2\x87\x92\x37\x64\x40\x4a\x5b\x0e\xef\xcd\x58\x9e\xae\x0b\x58\x11\x60\x51\xd0\x54\x88\x07\x0b\xf4\xb1\xd1\xac\x38\xe8\x5d\x6a\x17\x76\x23\xdb\x43\xa8\x30\x88\xb0\xce\xc7\x36\x40\xd9\xba\xb1\x26\x6a\x5b\x45\x65\xad\x6c\x3b\x95\x20\x1c\x86\x2a\x96\x40\x34\xb1\xa2\xb1\x4b\x95\xd5\x7a\x3a\xc0\x1e\x75\x19\xcb\xa5\x24\xf7\x58\x2c\xad\x40\x4e\xa0\x1c\xe9\xd0\xe7\xf0\xc6\x28\xea\x7c\xba\xb8\x8e\x4e\x5d\x13\x1a\x21\x12\x55\xb2\xf7\x0f\x85\x06\x52\x0d\x9d\xc0\x29\xc6\x2d\xa9\x00\x74\x2b\x0e\x0e\x1d\xeb\x1d\x64\xc0\xb2\x5b\xd9\x9a\x3c\x34\xe8\x42\x1f\xb0\x2f\xde\xde\xa4\x5e\xa8\xc2\x14\x46\x1e\xeb\x29\xa4\x2b\x54\x0f\x5b\x74\x85\xcf\xe2\xee\xb5\x75\xe9\x4d\x74\x87\x81\x57\xac\x39\x44\x55\x2b\x72\xa6\xf3\x90\x5d\x12\x3b\xd2\x9b\x92\x7d\xe0\x20\xbf\x3c\xf9\xfc\x58\x49\x02\xd0\xe8\xc3\xbd\x43\xe3\xb9\x6f\xfc\xa7\x76\x81\xb0\x59\x63\x58\x82\xb4\x19\x59\xe0\x49\xc9\x9e\xc8\xb9\xd2\x03\x78\x8f\xe5\x0c\x85\x27\x60\x1d\xa1\x9f\xae\x14\x73\xa9\xe5\x36\x42\x48\x7e\x39\x0a\x4e\x04\x6b\x28\xdb\x5a\x57\x5c\xef\x9b\xa5\x49\xc4\x70\xd4\x59\x0f\xc9\x19\x03\x95\xd6\xed\xe4\x5d\x61\xeb\x69\xf8\xd0\x3a\x47\x26\x74\xb9\x77\x2a\x9d\xc8\x73\x13\x26\xb8\x8a\x29\x83\x4d\xb4\x3c\x0b\xc6\x36\x34\x6d\xb8\x06\xdf\xaa\x0a\xd0\x47\x9e\x35\x9b\x39\x46\xe5\x70\xa7\x82\x86\x52\x32\x69\x07\x2a\xfe\xc5\x06\x7c\x5b\xd7\xe8\xf8\x53\x74\x7f\x95\x58\xec\xb2\x43\x64\x7e\x86\xcf\x27\x0c\x72\x5a\x5e\xce\x06\x8d\x9f\x9f\xb6\xe4\x3e\x8d\xdf\xef\x1a\xea\x0b\xa6\x00\x0f\xea\x1e\xe2\x38\x8a\xea\x67\x74\x13\x76\x0d\x2b\xd4\x7a\x27\xa1\xdf\x1b\xbc\x00\xf1\x00\x49\xac\xbe\xb2\x2e\x40\x53\xb9\xd8\x33\x8f\x53\x64\x24\x36\x87\xb5\xcb\x9e\x6c\x0a\x16\x7f\xe8\xaa\x25\xc7\x94\x0f\xef\x2f\x71\x65\x24\x66\x74\x16\x5c\x4b\xef\x2f\xa1\xb1\x1a\x1d\x87\x5d\x0e\xdf\xd9\xa9\x04\x26\x0f\x7d\xc4\xba\xd1\x74\x0d\x7c\x2c\x5f\x4f\xc5\xa7\xaa\x82\x82\x8e\xd5\x2e\xf9\x51\x3c\xcb\x5e\xcf\x09\x1f\xb9\x61\x9f\x4e\xbc\xef\x2f\x41\xa1\x8f\xca\x6c\x9c\x5d\xe1\x4a\xef\xe2\x0e\xe1\xf5\x1a\xbc\x3d\x24\xfb\xb8\xe4\x2b\x09\x04\xad\xa9\x80\xf7\x97\x37\xa6\x43\x3f\x91\x81\xe0\x29\x8f\x48\x25\x80\x4e\x5a\x27\x69\x31\x93\x9b\x4d\x7c\x10\x8c\x27\xcb\xb3\xfd\x59\xff\x09\x9d\xc3\xc3\xd2\xd9\x8f\x65\x66\x1a\xf3\x59\xc6\xe5\x94\x6b\x3c\x6b\xfa\x3b\xfb\x60\xdd\xee\x89\xbe\xef\x70\x73\xea\x7a\x34\xfb\xa1\x7c\x48\x22\x86\x67\xdf\x24\xb4\x8a\x35\x01\xaa\x58\xcc\x4e\x65\x94\x9a\xbb\x25\x47\x10\xf0\x81\x8e\x6d\x34\xd3\x1f\x3d\x5e\x05\x12\xa9\x33\x42\xf2\xbe\xea\xf9\xea\xd8\x90\x5a\x37\xc1\xc5\x13\xba\x4b\x8f\x54\x3c\x4d\xbf\x43\xdd\x39\xbb\x76\x88\x78\x69\x33\x6c\xab\x14\x18\x9d\xb4\xbf\x40\xd0\xc7\xbc\x3b\x61\x9f\xf8\x70\xa8\x9b\x89\x0d\x89\xcd\x5f\x23\x00\x1c\x69\x0c\x54\xbc\x89\x30\x27\xee\x71\x4e\xbf\x9d\x40\x6f\x69\x4d\xb1\xb2\xc4\xb9\x23\xb2\xf1\x40\xc6\xb6\x65\x15\x27\x10\x62\xc6\xe8\x36\x16\x34\x05\xd8\xd9\x76\x42\x93\x6c\xe4\xf4\x1f\x24\x29\xd7\xb6\xe0\x75\x32\x81\xa3\xae\x01\xec\xa6\x58\x9f\xeb\xdc\x93\x03\xb7\x19\x51\x5e\xbc\xbd\xe9\xc7\x6c\x7d\x64\xba\x24\xd7\x04\x5d\x78\xda\xf5\xd6\x4c\xba\x78\x8b\xa1\x3a\x83\xf6\xd5\xcd\xba\x93\x35\x76\xc3\x56\xb2\x3c\x93\xa2\x83\xa3\x4a\xec\xee\x09\xe5\x9c\x38\x93\x9d\xe5\x84\x62\x02\x3b\xea\x20\xae\xd3\xa8\xa9\x9b\x68\xed\x27\x7f\x62\x22\xc0\x54\x16\xe0\x1f\x77\x6f\x5e\x2f\xbe\xb7\x33\x28\xa3\x14\x80\x4a\x91\xef\x4e\x4a\x35\x99\x51\x6f\xd2\x8d\x5f\xee\xe2\x19\xaa\x46\xc3\x6b\xf2\x21\xef\x68\x90\xf3\xef\x9e\x7f\x98\xeb\x85\xbe\xb3\xee\xa4\xec\x0d\xf3\xb3\xde\xa1\xd8\x27\x75\x0c\x18\x61\xcb\xa1\xe2\xb9\xfa\x24\xd5\xb1\xe8\xc4\x4e\xa7\x26\x09\x5d\xb0\x9d\xb8\x2d\x81\xe6\x07\x5a\xc2\xa5\x78\xdb\x88\xcd\x9f\x0c\xd6\xf4\xf3\x74\x01\x03\xf8\xc3\xb6\x92\xa4\x7b\x29\x9b\x2e\x13\x73\xc3\x98\x54\xd6\x46\x4d\x49\xc7\x64\x4c\x91\xc1\x71\x59\x92\x9b\x3c\x5e\x41\x57\x9f\x69\x43\x26\x7c\x2d\x6e\xcf\x6b\x30\x76\x84\x22\x22\x16\xeb\x35\xa4\x78\xcd\x54\x9c\x30\xfd\xee\xf9\x87\x59\x8e\x0f\xf5\x25\x4d\x04\x7d\x84\xe7\xa9\x47\x91\x0e\xc0\x16\x5f\xe7\x70\x1f\xbd\x63\x67\x02\x7e\x14\x4a\x4a\x4e\x61\x73\x9a\xb5\x46\xfa\x05\x0b\x15\x6e\x08\xbc\xad\x09\xb6\xa4\x75\xd6\x9d\xb4\x60\x8b\xb1\x25\xee\x0d\x27\xfe\x86\xfd\x21\x69\xde\x5b\xfb\xe1\xf4\xfd\x9b\x57\x6f\x96\x89\x33\x71\xa8\x32\xf6\xee\x72\x38\x5b\xb3\x41\x1d\x5b\xbc\x34\x34\x8d\xde\x38\xdb\xed\xf9\x36\xb9\x4f\xb0\xdd\x01\xae\xef\xc9\xd6\x6d\x68\x1d\xe5\x53\xf3\xb4\x27\xe3\xf8\x78\x6e\xbc\x7f\x26\x26\xc8\xc7\x89\xe3\xff\x34\x87\x3d\x5b\x38\x33\x31\xff\x9c\x12\xee\xf5\xc8\xcb\x1f\x15\x4e\x0e\x23\xce\x50\xa0\x28\x5f\x61\x95\x5f\xc4\x03\x6d\x13\xfc\xc2\x6e\xc8\x6d\x98\xb6\x8b\xad\x75\x0f\x6c\xca\x4c\x5c\x33\x4b\x3e\xe0\x17\x71\x30\xb7\xf8\x2a\xfe\xf9\x62\x59\x66\x27\x7b\x53\x02\xc5\xcd\xbf\x87\x54\x42\xc7\x2f\xbe\x48\xa8\x7e\x3c\x78\x7e\x1d\xbb\xba\x4b\x09\x43\x1d\xc3\x4a\x58\x6c\x2b\x56\x55\x7f\x73\xd4\xe5\xd8\x99\x60\x62\x0f\x35\x16\x29\x35\xa3\xd9\xfd\xe6\xae\x2c\x0a\x4d\x07\xd4\x5d\xd6\x5d\x5f\x66\x68\x8a\x2c\xb6\xcf\x3e\xc8\xfa\x17\x69\xb0\xe5\xb3\xc2\xf7\xdf\x37\xaf\x7e\x1f\x07\x6f\xf9\x8b\x62\xf5\xb3\xdb\xbb\x09\x80\xa3\xa5\xfd\x35\xf0\x33\xd4\x4d\x85\xcf\xf6\x6b\xb1\x9d\xca\xba\xcb\xdf\xd1\x67\x80\x34\x20\x5e\x82\x9c\x6d\xd3\x42\xb0\x0e\x4b\xea\x56\xf6\xb3\x01\xe9\x19\x9a\x40\xc5\xeb\xe3\xeb\xdf\xcb\x54\xb4\xfa\xfb\xdd\xf8\x3a\x1a\x1e\xc3\xbb\x0f\x17\x09\x2b\x15\x3f\xf6\xdc\xc8\xe2\xf1\xe5\xf9\x70\x15\x7f\x27\x5a\x57\xf4\x42\x29\xdb\x9a\x30\x71\x1f\x8f\xce\xee\xef\xe0\xc7\x89\xe2\xfc\x9b\x7a\xb7\x42\x95\x63\x1b\x2a\xeb\xf8\x53\xec\x67\xf7\xd7\xf5\x17\x07\xd7\xda\xb7\x56\x1f\xfe\x26\xe0\xa9\xbb\xf5\x1a\x0d\x96\xe4\x32\x27\x80\xae\xd5\xa2\xad\x4c\x7a\xd7\xef\x9d\x6d\x9b\xce\x12\x51\x4b\x07\xb7\xda\x59\x77\xad\x54\x63\xe3\x07\x63\xa5\x54\x13\x5f\x7d\xd2\x0a\x26\xad\xf8\x64\xdb\x55\x0f\x2a\x3c\x51\xfc\xb7\xa4\x10\xff\xa6\x8b\xc4\xf3\x28\x7b\x52\x8e\xce\xc0\xa9\xd3\x65\x7e\x06\x0d\x06\x55\x8d\xc9\xc8\xbf\xdb\xb8\x78\x42\x10\x9b\xc6\xe7\x9b\x67\xa7\x54\x0b\xa4\xda\x1a\x7f\x0e\xe1\x13\x7a\xa7\x54\x4e\x7f\xa8\x70\xac\xde\xfd\x0f\x0f\xa6\x89\x15\xa4\xe9\x57\x11\xf8\x6c\x56\x16\xc3\x4c\x64\xc4\xd1\xbc\xcc\xbf\xc8\x87\xff\xc6\xa6\x90\x44\x74\x1a\x4e\x63\x87\x5d\x75\xbb\xe4\xff\x5b\x5a\xc7\xc0\xef\xa4\x7b\x84\xe0\xc5\xd1\x4f\x41\x62\xcc\x4c\xc6\x43\xd7\xd2\xc5\x90\x98\x8c\xf6\x5f\x10\xe3\xff\x0b\x00\x00\xff\xff\x55\x5a\xc8\x05\xd8\x23\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
